from sklearn.model_selection import train_test_split
from collections import Counter
from sklearn.metrics import accuracy_score
from sklearn.datasets import load_iris
import numpy as np

# --------------------------------------------
# 1. Wczytanie danych
# --------------------------------------------
iris = load_iris()
X = iris.data  # cechy
y = iris.target  # klasy

# --------------------------------------------
# 2. Podział na zbiór treningowy i testowy
# --------------------------------------------
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42, stratify=y
)


# --------------------------------------------
# 3. Metryki odległości
# --------------------------------------------
def euclidean_distance(a, b):
    return np.sqrt(np.sum((a - b) ** 2))


def manhattan_distance(a, b):
    return np.sum(np.abs(a - b))


def cosine_distance(a, b):
    dot = np.dot(a, b)
    norm_a = np.linalg.norm(a)
    norm_b = np.linalg.norm(b)
    return 1 - (dot / (norm_a * norm_b))


# --------------------------------------------
# 4. Klasyfikator KNN
# --------------------------------------------
def knn_predict(X_train, y_train, X_test, k=3, metric="euclidean"):
    predictions = []

    if metric == "euclidean":
        dist_func = euclidean_distance
    elif metric == "manhattan":
        dist_func = manhattan_distance
    elif metric == "cosine":
        dist_func = cosine_distance
    else:
        raise ValueError("Nieobsługiwana metryka!")

    for test_point in X_test:
        distances = [dist_func(test_point, train_point) for train_point in X_train]
        k_indices = np.argsort(distances)[:k]
        k_labels = [y_train[i] for i in k_indices]
        most_common = Counter(k_labels).most_common(1)[0][0]
        predictions.append(most_common)

    return predictions


# --------------------------------------------
# 5. Testowanie i obliczanie accuracy
# --------------------------------------------
for metric_name in ["euclidean", "manhattan", "cosine"]:
    y_pred = knn_predict(X_train, y_train, X_test, k=3, metric=metric_name)
    acc = accuracy_score(y_test, y_pred)
    print(f"Accuracy (metryka: {metric_name}): {acc:.2%}")